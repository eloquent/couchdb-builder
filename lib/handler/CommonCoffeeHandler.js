// Generated by CoffeeScript 1.10.0
(function() {
  var CommonCoffeeHandler, HandlerError, Promise, fs, path, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  Promise = require('bluebird');

  util = require('util');

  HandlerError = require('./error/HandlerError');

  module.exports = CommonCoffeeHandler = (function() {
    function CommonCoffeeHandler(template) {
      this.template = template;
      this.handleFile = bind(this.handleFile, this);
      if (this.template == null) {
        this.template = 'if (!module) { var module = {}; }\n\n%s\nmodule.exports;';
      }
    }

    CommonCoffeeHandler.prototype.handleFile = function(filePath) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (path.extname(filePath) !== '.coffee') {
            return resolve(null);
          }
          return fs.readFile(filePath, function(error, data) {
            var coffee, error1, js;
            if (error) {
              error = new HandlerError('CommonCoffeeHandler', filePath, error);
              return reject(error);
            }
            coffee = require('coffee-script');
            try {
              js = coffee.compile(data.toString(), {
                bare: true
              });
            } catch (error1) {
              error = error1;
              error = new HandlerError('CommonCoffeeHandler', filePath, error);
              return reject(error);
            }
            resolve([path.basename(filePath, '.coffee'), util.format(_this.template, js)]);
          });
        };
      })(this));
    };

    return CommonCoffeeHandler;

  })();

}).call(this);
